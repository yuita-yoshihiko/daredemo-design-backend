package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
)

// デザイン情報とカテゴリーの中間テーブル
type DesignTipCategory struct {
	DesignTipID int64 `db:"design_tip_id"` // design_tip_id
	CategoryID  int64 `db:"category_id"`   // category_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DesignTipCategory] exists in the database.
func (dtc *DesignTipCategory) Exists() bool {
	return dtc._exists
}

// Deleted returns true when the [DesignTipCategory] has been marked for deletion
// from the database.
func (dtc *DesignTipCategory) Deleted() bool {
	return dtc._deleted
}

// Insert inserts the [DesignTipCategory] to the database.
func (dtc *DesignTipCategory) Insert(ctx context.Context, db DB) error {
	switch {
	case dtc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dtc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.design_tip_categories (` +
		`design_tip_id, category_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, dtc.DesignTipID, dtc.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, dtc.DesignTipID, dtc.CategoryID); err != nil {
		return logerror(err)
	}
	// set exists
	dtc._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [DesignTipCategory] from the database.
func (dtc *DesignTipCategory) Delete(ctx context.Context, db DB) error {
	switch {
	case !dtc._exists: // doesn't exist
		return nil
	case dtc._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.design_tip_categories ` +
		`WHERE design_tip_id = $1 AND category_id = $2`
	// run
	logf(sqlstr, dtc.DesignTipID, dtc.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, dtc.DesignTipID, dtc.CategoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	dtc._deleted = true
	return nil
}

// DesignTipCategoryByDesignTipIDCategoryID retrieves a row from 'public.design_tip_categories' as a [DesignTipCategory].
//
// Generated from index 'design_tip_categories_pkey'.
func DesignTipCategoryByDesignTipIDCategoryID(ctx context.Context, db DB, designTipID, categoryID int64) (*DesignTipCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`design_tip_id, category_id ` +
		`FROM public.design_tip_categories ` +
		`WHERE design_tip_id = $1 AND category_id = $2`
	// run
	logf(sqlstr, designTipID, categoryID)
	dtc := DesignTipCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, designTipID, categoryID).Scan(&dtc.DesignTipID, &dtc.CategoryID); err != nil {
		return nil, logerror(err)
	}
	return &dtc, nil
}

// Category returns the Category associated with the [DesignTipCategory]'s (CategoryID).
//
// Generated from foreign key 'design_tip_categories_category_id_fkey'.
func (dtc *DesignTipCategory) Category(ctx context.Context, db DB) (*Category, error) {
	return CategoryByID(ctx, db, dtc.CategoryID)
}

// DesignTip returns the DesignTip associated with the [DesignTipCategory]'s (DesignTipID).
//
// Generated from foreign key 'design_tip_categories_design_tip_id_fkey'.
func (dtc *DesignTipCategory) DesignTip(ctx context.Context, db DB) (*DesignTip, error) {
	return DesignTipByID(ctx, db, dtc.DesignTipID)
}
