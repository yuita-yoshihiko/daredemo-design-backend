// Package models contains generated code for schema 'public'.
package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// デザイン情報カテゴリー
type Category struct {
	ID        int64     `db:"id"`         // id
	Name      string    `db:"name"`       // カテゴリー名
	CreatedAt time.Time `db:"created_at"` // created_at
	UpdatedAt time.Time `db:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Category] exists in the database.
func (c *Category) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Category] has been marked for deletion
// from the database.
func (c *Category) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Category] to the database.
func (c *Category) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.categories (` +
		`name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, c.Name, c.CreatedAt, c.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, c.Name, c.CreatedAt, c.UpdatedAt).Scan(&c.ID); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Category] in the database.
func (c *Category) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.categories SET ` +
		`name = $1, created_at = $2, updated_at = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, c.Name, c.CreatedAt, c.UpdatedAt, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.Name, c.CreatedAt, c.UpdatedAt, c.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Category] to the database.
func (c *Category) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Category].
func (c *Category) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.categories (` +
		`id, name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, c.ID, c.Name, c.CreatedAt, c.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.Name, c.CreatedAt, c.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Category] from the database.
func (c *Category) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.categories ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CategoryByName retrieves a row from 'public.categories' as a [Category].
//
// Generated from index 'categories_name_key'.
func CategoryByName(ctx context.Context, db DB, name string) (*Category, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, created_at, updated_at ` +
		`FROM public.categories ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	c := Category{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&c.ID, &c.Name, &c.CreatedAt, &c.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CategoryByID retrieves a row from 'public.categories' as a [Category].
//
// Generated from index 'categories_pkey'.
func CategoryByID(ctx context.Context, db DB, id int64) (*Category, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, created_at, updated_at ` +
		`FROM public.categories ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	c := Category{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&c.ID, &c.Name, &c.CreatedAt, &c.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
