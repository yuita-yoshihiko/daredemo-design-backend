package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// デザイン情報
type DesignTip struct {
	ID        int64     `db:"id"`         // id
	Title     string    `db:"title"`      // タイトル
	Guidance  string    `db:"guidance"`   // ガイダンス
	URL       string    `db:"url"`        // URL
	Media     string    `db:"media"`      // 媒体
	CreatedAt time.Time `db:"created_at"` // created_at
	UpdatedAt time.Time `db:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DesignTip] exists in the database.
func (dt *DesignTip) Exists() bool {
	return dt._exists
}

// Deleted returns true when the [DesignTip] has been marked for deletion
// from the database.
func (dt *DesignTip) Deleted() bool {
	return dt._deleted
}

// Insert inserts the [DesignTip] to the database.
func (dt *DesignTip) Insert(ctx context.Context, db DB) error {
	switch {
	case dt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.design_tips (` +
		`title, guidance, url, media, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, dt.Title, dt.Guidance, dt.URL, dt.Media, dt.CreatedAt, dt.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, dt.Title, dt.Guidance, dt.URL, dt.Media, dt.CreatedAt, dt.UpdatedAt).Scan(&dt.ID); err != nil {
		return logerror(err)
	}
	// set exists
	dt._exists = true
	return nil
}

// Update updates a [DesignTip] in the database.
func (dt *DesignTip) Update(ctx context.Context, db DB) error {
	switch {
	case !dt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.design_tips SET ` +
		`title = $1, guidance = $2, url = $3, media = $4, created_at = $5, updated_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, dt.Title, dt.Guidance, dt.URL, dt.Media, dt.CreatedAt, dt.UpdatedAt, dt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dt.Title, dt.Guidance, dt.URL, dt.Media, dt.CreatedAt, dt.UpdatedAt, dt.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DesignTip] to the database.
func (dt *DesignTip) Save(ctx context.Context, db DB) error {
	if dt.Exists() {
		return dt.Update(ctx, db)
	}
	return dt.Insert(ctx, db)
}

// Upsert performs an upsert for [DesignTip].
func (dt *DesignTip) Upsert(ctx context.Context, db DB) error {
	switch {
	case dt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.design_tips (` +
		`id, title, guidance, url, media, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`title = EXCLUDED.title, guidance = EXCLUDED.guidance, url = EXCLUDED.url, media = EXCLUDED.media, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dt.ID, dt.Title, dt.Guidance, dt.URL, dt.Media, dt.CreatedAt, dt.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dt.ID, dt.Title, dt.Guidance, dt.URL, dt.Media, dt.CreatedAt, dt.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dt._exists = true
	return nil
}

// Delete deletes the [DesignTip] from the database.
func (dt *DesignTip) Delete(ctx context.Context, db DB) error {
	switch {
	case !dt._exists: // doesn't exist
		return nil
	case dt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.design_tips ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, dt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dt.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dt._deleted = true
	return nil
}

// DesignTipByID retrieves a row from 'public.design_tips' as a [DesignTip].
//
// Generated from index 'design_tips_pkey'.
func DesignTipByID(ctx context.Context, db DB, id int64) (*DesignTip, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, title, guidance, url, media, created_at, updated_at ` +
		`FROM public.design_tips ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	dt := DesignTip{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dt.ID, &dt.Title, &dt.Guidance, &dt.URL, &dt.Media, &dt.CreatedAt, &dt.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dt, nil
}
